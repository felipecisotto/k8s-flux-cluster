apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: prometheus
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: monitoring
      version: "58.x"
  install:
    crds: Create
  upgrade:
    crds: CreateReplace
  values:
    grafana:
      enabled: false

    # Configura√ß√£o do AlertManager
    alertmanager:
      enabled: true
      # Configura√ß√£o direta do AlertManager em vez de usar Secret
      config:
        global:
          resolve_timeout: 5m
          telegram_api_url: https://api.telegram.org
        route:
          receiver: 'telegram-notifications'
          group_by: ['alertname', 'job', 'severity']
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 4h
          routes:
            - match:
                severity: critical
              receiver: 'telegram-notifications'
              continue: true
            - match:
                severity: warning
              receiver: 'telegram-notifications'
              continue: true
        receivers:
          - name: 'telegram-notifications'
            telegram_configs:
              - bot_token: '5851294352:AAH1ZL_NI36K_dDe28vke6RdBOhCFkNTxZ8'
                chat_id: 5930414419
                parse_mode: 'HTML'
                message: |
                  üö® <b>{{ .Status | toUpper }}</b> üö®
                  <b>Alerta:</b> {{ .CommonAnnotations.summary }}
                  <b>Descri√ß√£o:</b> {{ .CommonAnnotations.description }}
                  <b>Severidade:</b> {{ .CommonLabels.severity }}
                  <b>In√≠cio:</b> {{ .StartsAt.Format "02-01-2006 15:04:05" }}
                  <b>URL:</b> {{ .GeneratorURL }}
        inhibit_rules:
          - source_match:
              severity: 'critical'
            target_match:
              severity: 'warning'
            equal: ['alertname', 'namespace', 'service']

      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 1Gi

    prometheus:
      prometheusSpec:
        podMonitorNamespaceSelector:
          matchLabels:
            podmonitorscrape: "true"
        podMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        scrapeInterval: 15s
        scrapeTimeout: 10s
        retention: 15d
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        # Configura√ß√£o adicional para Proxmox
        additionalScrapeConfigs:
          - job_name: 'proxmox'
            static_configs:
              - targets:
                - 192.168.0.199:9221  # Proxmox VE node com PVE exporter
            metrics_path: /pve
            params:
              module: [default]
              cluster: ['1']
              node: ['1']
        # Configura√ß√£o para encontrar regras de alertas pela label
        ruleSelector:
          matchLabels:
            app.kubernetes.io/name: prometheus-operator
            app.kubernetes.io/part-of: kube-prometheus
        # Recursos de armazenamento
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 10Gi

    kube-state-metrics:
      enabled: true
      metricLabelsAllowlist:
        - nodes=[*]
        - pods=[*]
        - services=[*]
        - namespaces=[*]

    prometheus-node-exporter:
      enabled: true
